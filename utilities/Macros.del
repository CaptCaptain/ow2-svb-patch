Vector CenterPosition(Player player = EventPlayer()): (player.EyePosition() + player.Position()) / 2;

Boolean StoppedBeingHero(Player player = EventPlayer()): WaitUntil(HeroOf(player) != EvaluateOnce(HeroOf(player)) || HeroBeingDuplicated(player) != EvaluateOnce(HeroBeingDuplicated(player)), 9999);

Hero AccurateHeroOf(Player player = EventPlayer()): HeroBeingDuplicated(player) != null ? HeroBeingDuplicated(player) : HeroOf(player);

enum Ability {
    Ultimate,
    Ability1,
    Ability2
}
globalvar Hero ForbiddenAbilities = [
    // Ultimate
    [Hero.Doomfist, Hero.Dva, Hero.Pharah, Hero.Junkrat],
    // Ability 1
    [Hero.Reinhardt, Hero.Tracer],
    // Ability 2
    [Hero.Tracer]
];
Boolean UsingForbiddenAbility(Player player = EventPlayer()): (
    ArrayContains(ForbiddenAbilities[Ability.Ultimate], EvaluateOnce(AccurateHeroOf(player))) && IsUsingUltimate(player) ||
    ArrayContains(ForbiddenAbilities[Ability.Ability1], EvaluateOnce(AccurateHeroOf(player))) && IsUsingAbility1(player) ||
    ArrayContains(ForbiddenAbilities[Ability.Ability2], EvaluateOnce(AccurateHeroOf(player))) && IsUsingAbility2(player)
);

Boolean UsingExistingAbility(Player player = EventPlayer()): ((IsHero(Hero.Torbjorn, player) || IsHero(Hero.Sombra, player)) && IsUsingAbility2());

Player GetPlayerTarget(Player player = EventPlayer(), Team team = TeamOf(), RadiusLOS radiusLOS = RadiusLOS.Off, Number angle, Number radius):
SortedArray(
    FilteredArray(
            PlayersWithinRadius(EyePosition(player), radius, team, radiusLOS).Remove(player).Remove(AllDeadPlayers()),
            IsInViewAngle(player, ArrayElement(), angle) &&
            !(HeroOf(player) == Hero.Sombra && IsUsingAbility1()) &&
            !UsingForbiddenAbility(ArrayElement())
        ),
        AngleBetweenVectors(FacingDirectionOf(player), DirectionTowards(player.EyePosition(), (<Player>ArrayElement()).EyePosition())) + DistanceBetween(player.EyePosition(), (<Player>ArrayElement()).EyePosition())
).First;

Boolean AbortIfImmobile(Player player = EventPlayer()): AbortIf(HasStatus(Player: player, Status: Status.Asleep) || HasStatus(Player: player, Status: Status.Hacked) || HasStatus(Player: player, Status: Status.KnockedDown) || HasStatus(Player: player, Status: Status.Stunned) || HasStatus(Player: player, Status: Status.Frozen) || IsDead());