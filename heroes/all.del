playervar Number SupportHealingID;
playervar Number DamageMoveSpeedID;
playervar Number NextUltCharge = 5;
playervar Hero HeroActive = null;
playervar Number[] HeroEffects = [];
playervar Number[] HeroTexts = [];
playervar Number[] HeroHealthPools = [];
playervar Number[] HeroDamageModifications = [];
playervar Number[] HeroHealingModifications = [];
playervar Number[] HeroMoveSpeedModifications = [];
playervar Any[] HeroVars = [];

/* ======================================================== */
void InitialHeroSetup(in Hero hero) {
    WaitUntil(HeroActive == null, 9999);
    AbortIf(HeroActive == hero);
    Wait();
    HeroActive = hero;
}

void CleanupEffects() playervar '[all.del] Subroutine: Cleanup Effects' {
    // Cleanup effects
    DestroyEffect(HeroEffects);

    HeroEffects = [];
}

void CleanupHealthPools() playervar '[all.del] Subroutine: Cleanup Health Pool' {
    // Cleanup health pool
    foreach (define healthPool in HeroHealthPools) {
        RemoveHealthPoolFromPlayer(healthPool);
    }

    HeroHealthPools = [];
}

void CleanupTexts() playervar '[all.del] Subroutine: Cleanup Texts' {
    // Cleanup texts
    foreach (Number textID in HeroTexts) {
        DestroyHudText(textID);
        DestroyInWorldText(textID);
        DestroyProgressBarHudText(textID);
    }

    HeroTexts = [];
}

void CleanupDamageMods() playervar '[all.del] Subroutine: Cleanup Damage Modifications' {
    // Cleanup texts
    foreach (Number modificationID in HeroDamageModifications) {
        StopDamageModification(modificationID);
    }

    HeroDamageModifications = [];
}

void CleanupHealingMods() playervar '[all.del] Subroutine: Cleanup Healing Modifications' {
    // Cleanup texts
    foreach (Number modificationID in HeroHealingModifications) {
        StopHealingModification(modificationID);
    }

    HeroHealingModifications = [];
}

void CleanupMoveSpeedMods() playervar '[all.del] Subroutine: Cleanup Move Speed Modifications' {
    // Cleanup move speed
    foreach (Number modificationID in HeroMoveSpeedModifications) {
        CustomModifications.StopModifyingMoveSpeed(EventPlayer(), modificationID);
    }

    HeroMoveSpeedModifications = [];
}

void CleanupVariables() playervar '[all.del] Subroutine: Cleanup Variables' {
    // Cleanup move speed
    HeroVars = [];
}

/* ======================================================== */

rule: "[all.del] Tank Passive: Reduce Ultimate Charge"
Event.OnDamageDealt
if (UltimateChargePercent(Attacker()) < 100)
if (EventAbility() != Button.Ultimate)
if (UltimateChargePercent(Attacker()) > Attacker().NextUltCharge)
if (ArrayContains(AllTankHeroes(), HeroOf(Victim())) || ArrayContains(AllTankHeroes(), HeroBeingDuplicated(Victim())))
{
    SetUltimateCharge(Attacker(), UltimateChargePercent(Attacker()) - Max(1, EventDamage() / 250));
    Attacker().NextUltCharge = UltimateChargePercent(Attacker()) + 5;
}

rule: "[all.del] Reset Tank Passive"
Event.OngoingPlayer
if (UltimateChargePercent() == 0)
{
    NextUltCharge = 5;
}

rule: "[all.del] Tank Passive: Reduced Knockback"
Event.OngoingPlayer
if (ArrayContains(AllTankHeroes(), HeroOf()) || ArrayContains(AllTankHeroes(), HeroBeingDuplicated()))
{
    AbortIf(HeroOf() == Hero.Reinhardt);
    SetKnockbackReceived(EventPlayer(), 70);
    WaitUntil(!ArrayContains(AllTankHeroes(), HeroOf()) && !ArrayContains(AllTankHeroes(), HeroBeingDuplicated()), 9999);
    SetKnockbackReceived(EventPlayer(), 100);
}

rule: "[all.del] Damage Passive"
Event.OngoingPlayer
if (ArrayContains(AllDamageHeroes(), HeroOf()) || ArrayContains(AllDamageHeroes(), HeroBeingDuplicated()))
{
    if (!DamageMoveSpeedID) {
        CustomModifications.StartModifyingMoveSpeed(EventPlayer(), 115);
        DamageMoveSpeedID = MoveSpeedModification.LastMoveSpeedModificationID;
    }

    (<MoveSpeedModification>MoveSpeedModification.GetMoveSpeedModification(DamageMoveSpeedID)).Value = 115;

    WaitUntil((!ArrayContains(AllDamageHeroes(), HeroOf()) && !ArrayContains(AllDamageHeroes(), HeroBeingDuplicated())) || (HeroOf() == Hero.Echo && IsDuplicating() && !ArrayContains(AllDamageHeroes(), HeroBeingDuplicated())), 9999);

    (<MoveSpeedModification>MoveSpeedModification.GetMoveSpeedModification(DamageMoveSpeedID)).Value = 100;
    
    WaitUntil((HeroOf() == Hero.Echo && !IsDuplicating()) || !ArrayContains(AllDamageHeroes(), HeroOf()), 9999);
    LoopIf(HeroOf() == Hero.Echo && !IsDuplicating());
}

rule: "[all.del] Support Passive"
Event.OnDamageTaken
if (ArrayContains(AllSupportHeroes(), HeroOf()) || ArrayContains(AllSupportHeroes(), HeroBeingDuplicated()))
{
    StopHealOverTime(SupportHealingID);
    Wait(2, WaitBehavior.RestartWhenTrue);
    StartHealOverTime(EventPlayer(), EventPlayer(), 9999, 10);
    SupportHealingID = LastHealOverTime();
}

rule: "[all.del] Stop Support Passive"
Event.OngoingPlayer
if (!(ArrayContains(AllSupportHeroes(), HeroOf()) || ArrayContains(AllSupportHeroes(), HeroBeingDuplicated())) || NormalizedHealth() == 1)
{
    StopHealOverTime(SupportHealingID);
}