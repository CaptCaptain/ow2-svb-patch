enum SymmetraVars {
    BotPlayer
}

void CleanupSymmetra() playervar "[symmetra.del] Subroutine: Cleanup" {
    StoppedBeingHero();

    DestroyDummyBot(TeamOf(HeroVars[SymmetraVars.BotPlayer]), SlotOf(HeroVars[SymmetraVars.BotPlayer]));

    CleanupEffects();
    CleanupTexts();

    AllowButton(Button: Button.Ultimate);
    SetUltimateAbilityEnabled(Enabled: true);

    Wait();

    HeroActive = null;
}

void CreateSymmetraBotEffects() playervar "[symmetra.del] Subroutine: Create Bot Effects" {
    Wait(0.1);
    
    CreateEffect(AllPlayers(), Effect.EchoCloningEffect, <Color>TeamOf(), HeroVars[SymmetraVars.BotPlayer], 1, EffectRev.VisibleTo);
    ModifyVariable(HeroEffects, Operation.AppendToArray, LastCreatedEntity());

    Wait(0.1);

    CreateEffect(AllPlayers(), Effect.WinstonTeslaCannonTargetSound, <Color>TeamOf(), HeroVars[SymmetraVars.BotPlayer], 700, EffectRev.VisibleTo);
    ModifyVariable(HeroEffects, Operation.AppendToArray, LastCreatedEntity());

    Wait(0.1);
    
    for (define repeat = 0; 3; 1)
    {
        CreateEffect(AllPlayers(), Effect.BadAura, <Color>TeamOf(), HeroVars[SymmetraVars.BotPlayer], 0, EffectRev.VisibleTo);
        ModifyVariable(HeroEffects, Operation.AppendToArray, LastCreatedEntity());

        Wait(0.0833333333);
    }
}

void SymmetraButtonMacro(Button button) {
    WaitUntil(!EntityExists(HeroVars[SymmetraVars.BotPlayer]) || EventPlayer().IsButtonHeld(button), 9999);
   
    AbortIf(!EntityExists(HeroVars[SymmetraVars.BotPlayer]));
    StartHoldingButton(HeroVars[SymmetraVars.BotPlayer], button);
    
    WaitUntil(!EntityExists(HeroVars[SymmetraVars.BotPlayer]) || !EventPlayer().IsButtonHeld(button), 9999);
    StopHoldingButton(HeroVars[SymmetraVars.BotPlayer], button);
    
    Wait();
    LoopIf(EntityExists(HeroVars[SymmetraVars.BotPlayer]));
}

void SymmetraBotPrimaryFire() playervar "[symmetra.del] Subroutine: Bot Copy Primary Fire" { SymmetraButtonMacro(Button.PrimaryFire); }
void SymmetraBotSecondaryFire() playervar "[symmetra.del] Subroutine: Bot Copy Secondary Fire" { SymmetraButtonMacro(Button.SecondaryFire); }
void SymmetraBotCrouch() playervar "[symmetra.del] Subroutine: Bot Copy Crouch" { SymmetraButtonMacro(Button.Crouch); }
void SymmetraBotJump() playervar "[symmetra.del] Subroutine: Bot Copy Jump" { SymmetraButtonMacro(Button.Jump); }
void SymmetraBotReload() playervar "[symmetra.del] Subroutine: Bot Copy Jump" { SymmetraButtonMacro(Button.Reload); }

void InitialSymmetra() playervar "[symmetra.del] Subroutine: Initial" {
    InitialHeroSetup(Hero.Symmetra);

    DisallowButton(Button: Button.Ultimate);

    # Create Hud
    CreateHudText(EventPlayer(), null, null, <"<0>(<1>)", <" \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n <0>", <"                                                                                                                            <0>", <"                                                                   <0>", " ">>>, "Light Clone">, Location.Left, 1, Color.White, Color.White, Color.White, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
    ModifyVariable(HeroTexts, Operation.AppendToArray, LastTextID());

    async! CleanupSymmetra();
}

void SymmetraLightCloneUlt() playervar "[symmetra.del] Subroutine: Ult" {
    SetUltimateCharge(ChargePercent: 0);
    SetUltimateAbilityEnabled(Enabled: false);

    # Create bot
    CreateDummyBot(Hero.Symmetra, TeamOf(), SlotOf() + 5, PositionOf(), FacingDirectionOf());
    HeroVars[SymmetraVars.BotPlayer] = LastCreatedEntity();

    SetInvisible(HeroVars[SymmetraVars.BotPlayer], InvisibleTo.All);

    # Wait for bot to spawn
    WaitUntil(IsAlive(HeroVars[SymmetraVars.BotPlayer]), 1);
    WaitUntil(HasSpawned(HeroVars[SymmetraVars.BotPlayer]), 1);

    # If the bot doesn't spawn, return ult back to Symmetra and abort
    SkipIf(EntityExists(HeroVars[SymmetraVars.BotPlayer]), 3);
    SetUltimateCharge(ChargePercent: 100);
    SetUltimateAbilityEnabled(Enabled: true);
    Abort();

    Wait();

    StartForcingDummyBotName(HeroVars[SymmetraVars.BotPlayer], <"<0>'s Light Clone", <String>EventPlayer()>);
    SetAmmo(HeroVars[SymmetraVars.BotPlayer], 0, Ammo(Clip: 0));
    SetDamageDealt(HeroVars[SymmetraVars.BotPlayer], 50);
    SetUltimateAbilityEnabled(HeroVars[SymmetraVars.BotPlayer], false);
    Teleport(HeroVars[SymmetraVars.BotPlayer], PositionOf());

    Wait(0.08);

    # Create effects
    async CreateSymmetraBotEffects();

    # Casting
    PlayEffect(AllPlayers(), PlayEffect.RingExplosion, <Color>TeamOf(), PositionOf(HeroVars[SymmetraVars.BotPlayer]), 10);
    PlayEffect(AllPlayers(), PlayEffect.SombraTranslocatorDisappearSound, <Color>TeamOf(), EyePosition(HeroVars[SymmetraVars.BotPlayer]), 500);
    PlayEffect(AllPlayers(), PlayEffect.DoomfistRisingUppercutImpactSound, <Color>TeamOf(), EyePosition(HeroVars[SymmetraVars.BotPlayer]), 500);

    SetInvisible(HeroVars[SymmetraVars.BotPlayer], InvisibleTo.None);

    Communicate(EventPlayer(), Communication.Attacking);

    async UpdateSymmetraAI();

    # Wait until the bot is dead or after 12 seconds have elapsed
    WaitUntil(IsDead(HeroVars[SymmetraVars.BotPlayer]) || IsDead(), 12);
    Wait();

    # Cleanup
    PlayEffect(AllPlayers(), PlayEffect.BadExplosion, <Color>TeamOf(), PositionOf(HeroVars[SymmetraVars.BotPlayer]), 10);
    PlayEffect(AllPlayers(), PlayEffect.SombraTranslocatorDisappearSound, <Color>TeamOf(), EyePosition(HeroVars[SymmetraVars.BotPlayer]), 500);
    PlayEffect(AllPlayers(), PlayEffect.DoomfistRisingUppercutImpactSound, <Color>TeamOf(), EyePosition(HeroVars[SymmetraVars.BotPlayer]), 500);
    DestroyDummyBot(TeamOf(HeroVars[SymmetraVars.BotPlayer]), SlotOf(HeroVars[SymmetraVars.BotPlayer]));
    
    SetUltimateAbilityEnabled(Enabled: true);
    HeroVars[SymmetraVars.BotPlayer] = [];

    CleanupEffects();
}

void UpdateSymmetraAI() playervar "[symmetra.del] Subroutine: Update Symmetra AI" {
    # Mirror the player's movement
    StartThrottleInDirection(HeroVars[SymmetraVars.BotPlayer], DirectionTowards(WorldVectorOf(Vector(), EventPlayer(), LocalVector.RotationAndTranslation), WorldVectorOf(Vector(-1 * ThrottleOf().X, 0, ThrottleOf().Z), EventPlayer(), LocalVector.RotationAndTranslation)), HorizontalSpeedOf(), Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle);

    StartFacing(HeroVars[SymmetraVars.BotPlayer], UpdateEveryFrame(DirectionTowards(EyePosition(HeroVars[SymmetraVars.BotPlayer]), RayCastHitPosition(EyePosition(), EyePosition() + (FacingDirectionOf() * 500), AllPlayers(OppositeTeamOf(TeamOf())), [HeroVars[SymmetraVars.BotPlayer], EventPlayer()], false))), 1000, Relative.ToWorld, FacingRev.DirectionAndTurnRate);

    DisableMovementCollisionWithPlayers(HeroVars[SymmetraVars.BotPlayer]);
    Teleport(HeroVars[SymmetraVars.BotPlayer], PositionOf());
    StartModifyingHeroVoiceLines(HeroVars[SymmetraVars.BotPlayer], RandomReal(0, 2), false);

    async SymmetraBotPrimaryFire();
    async SymmetraBotSecondaryFire();
    async SymmetraBotJump();
    async SymmetraBotCrouch();
    async SymmetraBotReload();
}

/* ================================================== */

rule: '[symmetra.del] Initial'
Event.OngoingPlayer
Player.Symmetra
{
    InitialSymmetra();
}

rule: '[symmetra.del] Light Clone Ult'
Event.OngoingPlayer
Player.Symmetra
if (IsButtonHeld(Button: Button.Ultimate))
if (IsAlive())
if (UltimateChargePercent() == 100)
{
    SymmetraLightCloneUlt();
}

/* ================================================== */

rule: '[symmetra.del] Initial (Duplication)'
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Symmetra)
{
    InitialSymmetra();
}

rule: '[symmetra.del] Light Clone Ult (Duplication)'
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Symmetra)
if (IsButtonHeld(Button: Button.Ultimate))
if (UltimateChargePercent() == 100)
{
    SymmetraLightCloneUlt();
}