globalvar define RolePassivesEnabled = WorkshopSettingToggle("OW2 Experimental Combat Changes", "Enable Role Passives", true, 1);
playervar define SupportHealingID;
playervar define NextUltCharge = 5;

/* ======================================================== */

rule: "Tank Passive: Reduce Ultimate Charge"
Event.OnDamageDealt
if (RolePassivesEnabled)
if (IsTrueForAny(AllTankHeroes(), HeroOf(Victim()) == ArrayElement()) == true || IsTrueForAny(AllTankHeroes(), HeroBeingDuplicated(Victim()) == ArrayElement()) == true)
if (UltimateChargePercent(Attacker()) < 100)
if (UltimateChargePercent(Attacker()) > Attacker().NextUltCharge)
{
    Attacker().NextUltCharge = UltimateChargePercent(Attacker()) + 5;
    SetUltimateCharge(Attacker(), UltimateChargePercent(Attacker()) - Max(2, EventDamage() / 200));
}

rule: "Reset Tank Passive"
Event.OngoingPlayer
if (RolePassivesEnabled)
if (UltimateChargePercent() == 0)
{
    NextUltCharge = 5;
}

rule: "Tank Passive: Reduced Knockback"
Event.OngoingPlayer
if (RolePassivesEnabled)
if (IsTrueForAny(AllTankHeroes(), HeroOf() == ArrayElement() || HeroBeingDuplicated(EventPlayer()) == ArrayElement()))
{
    SetKnockbackReceived(EventPlayer(), 50);
    WaitUntil(IsTrueForAll(AllTankHeroes(), HeroOf() != ArrayElement() && HeroBeingDuplicated(EventPlayer()) != ArrayElement()), 9999);
    SetKnockbackReceived(EventPlayer(), 100);
}

rule: "Damage Passive"
Event.OngoingPlayer
if (RolePassivesEnabled)
if (IsTrueForAny(AllDamageHeroes(), HeroOf() == ArrayElement() || HeroBeingDuplicated(EventPlayer()) == ArrayElement()))
{
    SetMoveSpeed(EventPlayer(), 125);
    WaitUntil(IsTrueForAll(AllDamageHeroes(), HeroOf() != ArrayElement() && HeroBeingDuplicated(EventPlayer()) != ArrayElement()), 9999);
    SetMoveSpeed(EventPlayer(), 100);
}

rule: "Support Passive"
Event.OnDamageTaken
if (RolePassivesEnabled)
if (IsTrueForAny(AllSupportHeroes(), HeroOf() == ArrayElement() || HeroBeingDuplicated(EventPlayer()) == ArrayElement()))
{
    StopHealOverTime(SupportHealingID);
    Wait(2, WaitBehavior.AbortWhenFalse);
    StartHealOverTime(EventPlayer(), EventPlayer(), 9999, 10);
    SupportHealingID = LastHealOverTime();
}

rule: "Stop Support Passive"
Event.OngoingPlayer
if (RolePassivesEnabled)
if (IsTrueForAll(AllSupportHeroes(), HeroOf() != ArrayElement() && HeroBeingDuplicated(EventPlayer()) != ArrayElement()) || NormalizedHealth() == 1)
{
    StopHealOverTime(SupportHealingID);
}