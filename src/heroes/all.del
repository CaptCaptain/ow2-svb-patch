globalvar Boolean RolePassivesEnabled = true;
playervar Number SupportHealingID;
playervar Number NextUltCharge = 5;
playervar Hero ActiveHero = [];
playervar Number HeroEffects = [];
playervar Number HeroTexts = [];
playervar Number HeroDamageModifications = [];
playervar Number HeroHealingModifications = [];

/* ======================================================== */

void CleanupEffects() 'Subroutine: Cleanup Effects' {
    // Cleanup effects
    foreach (Number effectID in HeroEffects) {
        DestroyEffect(effectID);
    }

    HeroEffects = [];
}

void CleanupTexts() 'Subroutine: Cleanup Texts' {
    // Cleanup texts
    foreach (Number textID in HeroTexts) {
        DestroyHudText(textID);
    }

    HeroTexts = [];
}

void CleanupDamageMods() 'Subroutine: Cleanup Damage Modifications' {
    // Cleanup texts
    foreach (Number modificationID in HeroDamageModifications) {
        StopDamageModification(modificationID);
    }

    HeroDamageModifications = [];
}

void CleanupHealingMods() 'Subroutine: Cleanup Healing Modifications' {
    // Cleanup texts
    foreach (Number modificationID in HeroHealingModifications) {
        StopDamageModification(modificationID);
    }

    HeroHealingModifications = [];
}

/* ======================================================== */

rule: "Tank Passive: Reduce Ultimate Charge"
Event.OnDamageDealt
if (RolePassivesEnabled)
if (UltimateChargePercent(Attacker()) < 100)
if (EventAbility() != Button.Ultimate)
if (UltimateChargePercent(Attacker()) > Attacker().NextUltCharge)
if (IsTrueForAny(AllTankHeroes(), HeroOf(Victim()) == ArrayElement()) == true || IsTrueForAny(AllTankHeroes(), HeroBeingDuplicated(Victim()) == ArrayElement()) == true)
{
    SetUltimateCharge(Attacker(), UltimateChargePercent(Attacker()) - Max(4, EventDamage() / 50));
    Attacker().NextUltCharge = UltimateChargePercent(Attacker()) + 5;
}

rule: "Reset Tank Passive"
Event.OngoingPlayer
if (RolePassivesEnabled)
if (UltimateChargePercent() == 0)
{
    NextUltCharge = 5;
}

rule: "Tank Passive: Reduced Knockback"
Event.OngoingPlayer
if (RolePassivesEnabled)
if (IsTrueForAny(AllTankHeroes(), HeroOf() == ArrayElement() || HeroBeingDuplicated(EventPlayer()) == ArrayElement()))
{
    AbortIf(HeroOf() == Hero.Reinhardt);
    SetKnockbackReceived(EventPlayer(), 30);
    WaitUntil(IsTrueForAll(AllTankHeroes(), HeroOf() != ArrayElement() && HeroBeingDuplicated(EventPlayer()) != ArrayElement()), 9999);
    SetKnockbackReceived(EventPlayer(), 100);
}

rule: "Damage Passive"
Event.OngoingPlayer
if (RolePassivesEnabled)
if (IsTrueForAny(AllDamageHeroes(), HeroOf() == ArrayElement() || HeroBeingDuplicated(EventPlayer()) == ArrayElement()))
{
    SetMoveSpeed(EventPlayer(), 115);
    WaitUntil(IsTrueForAll(AllDamageHeroes(), HeroOf() != ArrayElement() && HeroBeingDuplicated(EventPlayer()) != ArrayElement()), 9999);
    SetMoveSpeed(EventPlayer(), 100);
}

rule: "Support Passive"
Event.OnDamageTaken
if (RolePassivesEnabled)
if (IsTrueForAny(AllSupportHeroes(), HeroOf() == ArrayElement() || HeroBeingDuplicated(EventPlayer()) == ArrayElement()))
{
    StopHealOverTime(SupportHealingID);
    Wait(2, WaitBehavior.AbortWhenFalse);
    StartHealOverTime(EventPlayer(), EventPlayer(), 9999, 20);
    SupportHealingID = LastHealOverTime();
}

rule: "Stop Support Passive"
Event.OngoingPlayer
if (RolePassivesEnabled)
if (IsTrueForAll(AllSupportHeroes(), HeroOf() != ArrayElement() && HeroBeingDuplicated(EventPlayer()) != ArrayElement()) || NormalizedHealth() == 1)
{
    StopHealOverTime(SupportHealingID);
}