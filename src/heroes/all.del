playervar Number SupportHealingID;
playervar Number NextUltCharge = 5;
playervar Hero ActiveHero = [];
playervar Number HeroEffects = [];
playervar Number HeroTexts = [];
playervar Number HeroHealthPools = [];
playervar Number HeroDamageModifications = [];
playervar Number HeroHealingModifications = [];

/* ======================================================== */

void InitialHeroSetup(in Hero hero) {
    AbortIf(ArrayContains(ActiveHero, hero));
    WaitUntil(CountOf(ActiveHero) == 0, 9999);
    Wait();

    ModifyVariable(ActiveHero, Operation.AppendToArray, hero);
}

void CleanupEffects() 'Subroutine: Cleanup Effects' {
    // Cleanup effects
    foreach (Number effectID in HeroEffects) {
        DestroyEffect(effectID);
    }

    HeroEffects = [];
}

void CleanupHealthPools() 'Subroutine: Cleanup Health Pool' {
    // Cleanup health pool
    foreach (define healthPool in HeroHealthPools) {
        RemoveHealthPoolFromPlayer(healthPool);
    }

    HeroHealthPools = [];
}

void CleanupTexts() 'Subroutine: Cleanup Texts' {
    // Cleanup texts
    foreach (Number textID in HeroTexts) {
        DestroyHudText(textID);
        DestroyInWorldText(textID);
    }

    HeroTexts = [];
}

void CleanupDamageMods() 'Subroutine: Cleanup Damage Modifications' {
    // Cleanup texts
    foreach (Number modificationID in HeroDamageModifications) {
        StopDamageModification(modificationID);
    }

    HeroDamageModifications = [];
}

void CleanupHealingMods() 'Subroutine: Cleanup Healing Modifications' {
    // Cleanup texts
    foreach (Number modificationID in HeroHealingModifications) {
        StopHealingModification(modificationID);
    }

    HeroHealingModifications = [];
}

/* ======================================================== */

rule: "Tank Passive: Reduce Ultimate Charge"
Event.OnDamageDealt
if (UltimateChargePercent(Attacker()) < 100)
if (EventAbility() != Button.Ultimate)
if (UltimateChargePercent(Attacker()) > Attacker().NextUltCharge)
if (ArrayContains(AllTankHeroes(), HeroOf(Victim())) || ArrayContains(AllTankHeroes(), HeroBeingDuplicated(Victim())))
{
    SetUltimateCharge(Attacker(), UltimateChargePercent(Attacker()) - Max(1, EventDamage() / 250));
    Attacker().NextUltCharge = UltimateChargePercent(Attacker()) + 5;
}

rule: "Reset Tank Passive"
Event.OngoingPlayer
if (UltimateChargePercent() == 0)
{
    NextUltCharge = 5;
}

rule: "Tank Passive: Reduced Knockback"
Event.OngoingPlayer
if (ArrayContains(AllTankHeroes(), HeroOf()) || ArrayContains(AllTankHeroes(), HeroBeingDuplicated()))
{
    AbortIf(HeroOf() == Hero.Reinhardt);
    SetKnockbackReceived(EventPlayer(), 30);
    WaitUntil(!ArrayContains(AllTankHeroes(), HeroOf()) && !ArrayContains(AllTankHeroes(), HeroBeingDuplicated()), 9999);
    SetKnockbackReceived(EventPlayer(), 100);
}

rule: "Damage Passive"
Event.OngoingPlayer
if (ArrayContains(AllDamageHeroes(), HeroOf()) || ArrayContains(AllDamageHeroes(), HeroBeingDuplicated()))
{
    SetMoveSpeed(EventPlayer(), 115);
    WaitUntil(!ArrayContains(AllDamageHeroes(), HeroOf()) && !ArrayContains(AllDamageHeroes(), HeroBeingDuplicated()), 9999);
    SetMoveSpeed(EventPlayer(), 100);
}

rule: "Support Passive"
Event.OnDamageTaken
if (ArrayContains(AllSupportHeroes(), HeroOf()) || ArrayContains(AllSupportHeroes(), HeroBeingDuplicated()))
{
    StopHealOverTime(SupportHealingID);
    Wait(1, WaitBehavior.RestartWhenTrue);
    StartHealOverTime(EventPlayer(), EventPlayer(), 9999, 20);
    SupportHealingID = LastHealOverTime();
}

rule: "Stop Support Passive"
Event.OngoingPlayer
if ((!ArrayContains(AllSupportHeroes(), HeroOf()) && !ArrayContains(AllSupportHeroes(), HeroBeingDuplicated())) || NormalizedHealth() == 1)
{
    StopHealOverTime(SupportHealingID);
}