import '../../../OSTWUtils/EasingFunctions.del';

/* ======================================================== */

void CleanupBaptiste() playervar '[baptiste.del] Subroutine: Cleanup' {
    StoppedBeingHero();

    CleanupEffects();

    AllowButton(Button: Button.Ability2);
    CleanupHealingMods();
    SetMoveSpeed(MoveSpeedPercent: 100);
    SetJumpVerticalSpeed(JumpVerticalSpeedPercent: 100);

    Wait();

    ModifyVariable(ActiveHero, Operation.RemoveFromArrayByValue, Hero.Baptiste);
}

void SlowdownBaptiste() playervar '[baptiste.del] Subroutine: Slowdown' {
    Number frac = 1;
    ChaseVariableOverTime(frac, 0.25, 1, TimeChaseReevaluation.DestinationAndDuration);
    while (frac > 0.25) {
        if (!IsHero(Hero.Baptiste)) {break;}
        SetMoveSpeed(MoveSpeedPercent: EasingFunctions.EaseInOutCubic(frac) * 100);
        SetJumpVerticalSpeed(JumpVerticalSpeedPercent: EasingFunctions.EaseInOutCubic(frac) * 100);
        Wait();
    }
    StopChasingVariable(frac);
}

void ReturnBaptisteToNormalSpeed() playervar '[baptiste.del] Subroutine: Transition to Normal Speed' {
    Number frac = 0.25;
    ChaseVariableOverTime(frac, 1, 1, TimeChaseReevaluation.DestinationAndDuration);
    while (frac < 1) {
        if (!IsHero(Hero.Baptiste)) {break;}
        SetMoveSpeed(MoveSpeedPercent: EasingFunctions.EaseInOutCubic(frac) * 100);
        SetJumpVerticalSpeed(JumpVerticalSpeedPercent: EasingFunctions.EaseInOutCubic(frac) * 100);
        Wait();
    }
    StopChasingVariable(frac);
}

void BaptisteCastIF() playervar '[baptiste.del] Subroutine: Cast Immortality Field' {  
    // Create effects
    for (define repeat = 0; 5; 1)
    {
        CreateEffect(AllPlayers(), Effect.HealTargetEffect, <Color>TeamOf(), UpdateEveryFrame(EyePosition()), 1, EffectRev.VisibleToPositionAndRadius);
        ModifyVariable(HeroEffects, Operation.AppendToArray, LastCreatedEntity());
    }
    CreateEffect(EventPlayer(), Effect.GoodAuraSound, <Color>TeamOf(), EventPlayer(), 700, EffectRev.VisibleToPositionAndRadius);
    ModifyVariable(HeroEffects, Operation.AppendToArray, LastCreatedEntity());

    async! SlowdownBaptiste();

    Communicate(EventPlayer(), Communication.WithYou);

    WaitUntil(IsTrueForAny([HasStatus(Status: Status.Asleep), HasStatus(Status: Status.Hacked), HasStatus(Status: Status.KnockedDown), HasStatus(Status: Status.Stunned), HasStatus(Status: Status.Frozen)], ArrayElement() == true), 1);

    # Stun check
    if (IsTrueForAny([HasStatus(Status: Status.Asleep), HasStatus(Status: Status.Hacked), HasStatus(Status: Status.KnockedDown), HasStatus(Status: Status.Stunned), HasStatus(Status: Status.Frozen)], ArrayElement() == false)) {
        AllowButton(Button: Button.Ability2);
        PressButton(Button: Button.Ability2);
        DisallowButton(Button: Button.Ability2);
    }

    CleanupEffects();

    async! ReturnBaptisteToNormalSpeed();

    WaitUntil(!IsUsingAbility2(), 0.5);
    SetAbilityCooldown(Button: Button.Ability2, Cooldown: 25);
}

void InitialBaptiste() playervar "[baptiste.del] Subroutine: Initial" {
    InitialHeroSetup(Hero.Baptiste);

    StartHealingModification(EventPlayer(), EventPlayer(), 50, HealingModificationRev.ReceiversAndHealers);
    ModifyVariable(HeroHealingModifications, Operation.AppendToArray, LastHealingModificationID());
    DisallowButton(Button: Button.Ability2);

    async! CleanupBaptiste();
}

/* ======================================================== */

rule: '[baptiste.del] Initial'
Event.OngoingPlayer
Player.Baptiste
{
    InitialBaptiste();
}

rule: '[baptiste.del] Cast IF'
Event.OngoingPlayer
Player.Baptiste
if (IsButtonHeld(Button: Button.Ability2))
if (AbilityCooldown(Button: Button.Ability2) == 0)
{
    BaptisteCastIF();
}

rule: '[baptiste.del] Initial (Duplication)'
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Baptiste)
{
    InitialBaptiste();
}

rule: '[baptiste.del] Cast IF (Duplication)'
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Baptiste)
if (IsButtonHeld(Button: Button.Ability2))
if (AbilityCooldown(Button: Button.Ability2) == 0)
{
    BaptisteCastIF();
}