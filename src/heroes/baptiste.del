import '../../../OSTWUtils/EasingFunctions.del';

playervar Number HealingModification;

/* ======================================================== */

void CleanupBaptiste() 'Subroutine: Cleanup Baptiste' {
    WaitUntil(HeroOf() != Hero.Baptiste && !IsDuplicating(), 9999);

    CleanupEffects();

    AllowButton(Button: Button.Ability2);
    StopHealingModification(HealingModification);
    SetMoveSpeed(MoveSpeedPercent: 100);

    Wait();

    ModifyVariable(ActiveHero, Operation.RemoveFromArrayByValue, Hero.Baptiste);
}

void SlowdownBaptiste() 'Subroutine: Slowdown Baptiste' {
    for (define frac = 1; frac > 0.25; frac -= 0.024)
    {
        AbortIf(!IsHero(Hero.Baptiste));
        SetMoveSpeed(MoveSpeedPercent: EasingFunctions.EaseInOutCubic(frac) * 100);
        Wait();
    }
}

void ReturnBaptisteToNormalSpeed() 'Subroutine: Return Baptiste to Normal Speed' {
    for (define frac = 0.25; frac < 1; frac += 0.032)
    {
        AbortIf(!IsHero(Hero.Baptiste));
        SetMoveSpeed(MoveSpeedPercent: EasingFunctions.EaseInOutCubic(frac) * 100);
        Wait();
    }
}

void BaptisteCastIF() 'Subroutine: Baptiste Cast Immortality Field' {  
    // Create effects
    for (define repeat = 0; 5; 1)
    {
        CreateEffect(AllPlayers(), Effect.HealTargetEffect, <Color>TeamOf(), UpdateEveryFrame(EyePosition()), 1, EffectRev.VisibleToPositionAndRadius);
        ModifyVariable(HeroEffects, Operation.AppendToArray, LastCreatedEntity());
    }
    CreateEffect(LocalPlayer(), Effect.BaptisteImmortalityFieldProtectedEffect, <Color>TeamOf(), EventPlayer(), 1, EffectRev.VisibleToPositionAndRadius);
    ModifyVariable(HeroEffects, Operation.AppendToArray, LastCreatedEntity());
    CreateEffect(LocalPlayer(), Effect.BaptisteImmortalityFieldProtectedSound, <Color>TeamOf(), EventPlayer(), 700, EffectRev.VisibleToPositionAndRadius);
    ModifyVariable(HeroEffects, Operation.AppendToArray, LastCreatedEntity());

    async! SlowdownBaptiste();

    Communicate(EventPlayer(), Communication.WithYou);

    WaitUntil(IsTrueForAny([HasStatus(Status: Status.Asleep), HasStatus(Status: Status.Hacked), HasStatus(Status: Status.KnockedDown), HasStatus(Status: Status.Stunned), HasStatus(Status: Status.Frozen)], ArrayElement() == true), 1);

    # Stun check
    if (IsTrueForAny([HasStatus(Status: Status.Asleep), HasStatus(Status: Status.Hacked), HasStatus(Status: Status.KnockedDown), HasStatus(Status: Status.Stunned), HasStatus(Status: Status.Frozen)], ArrayElement() == false)) {
        AllowButton(Button: Button.Ability2);
        PressButton(Button: Button.Ability2);
        DisallowButton(Button: Button.Ability2);
    }

    CleanupEffects();

    async! ReturnBaptisteToNormalSpeed();

    WaitUntil(!IsUsingAbility2(), 0.5);
    SetAbilityCooldown(Button: Button.Ability2, Cooldown: 25);
}

void InitialBaptiste() "Subroutine: Initial Baptiste" {
    InitialHeroSetup(Hero.Baptiste);

    StartHealingModification(EventPlayer(), EventPlayer(), 50, HealingModificationRev.ReceiversAndHealers);
    HealingModification = LastHealingModificationID();
    DisallowButton(Button: Button.Ability2);

    async! CleanupBaptiste();
}

/* ======================================================== */

rule: 'Initial Baptiste'
Event.OngoingPlayer
Player.Baptiste
{
    InitialBaptiste();
}

rule: 'Baptiste Cast IF'
Event.OngoingPlayer
Player.Baptiste
if (IsButtonHeld(Button: Button.Ability2))
if (AbilityCooldown(Button: Button.Ability2) == 0)
{
    BaptisteCastIF();
}

rule: 'Initial Baptiste (Duplication)'
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Baptiste)
{
    InitialBaptiste();
}

rule: 'Baptiste Cast IF (Duplication)'
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Baptiste)
if (IsButtonHeld(Button: Button.Ability2))
if (AbilityCooldown(Button: Button.Ability2) == 0)
{
    BaptisteCastIF();
}