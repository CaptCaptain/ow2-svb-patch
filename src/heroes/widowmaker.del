void CleanupWidowmaker() "Subroutine: Cleanup Widowmaker" {
    WaitUntil(HeroOf() != Hero.Widowmaker && !IsDuplicating(), 9999);

    CleanupDamageMods();

    ModifyVariable(ActiveHero, Operation.RemoveFromArrayByValue, Hero.Widowmaker);

    Wait();
}

void InitialWidowmaker() "Subroutine: Initial Widowmaker" {
    InitialHeroSetup(Hero.Widowmaker);

    for (define slot = 0; 5; 1)
    {
        StartDamageModification(PlayersInSlot(EvaluateOnce(slot), OppositeTeamOf(TeamOf())), EventPlayer(),!IsMeleeing() && IsFiringSecondary() ? Min(Max(25, DistanceBetween(EventPlayer(), PlayersInSlot(EvaluateOnce(slot), OppositeTeamOf(TeamOf()))) * 3.33333333333), 100) : 100, DamageModificationRev.ReceiversDamagersAndDamagePercent);
        ModifyVariable(HeroDamageModifications, Operation.AppendToArray, LastDamageModificationID());
    }

    async! CleanupWidowmaker();
}

/* ================================================== */

rule: 'Initial Widowmaker'
Event.OngoingPlayer
Player.Widowmaker
{
    InitialWidowmaker();
}

/* ================================================== */

rule: 'Initial Widowmaker (Duplication)'
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Widowmaker)
{
    InitialWidowmaker();
}