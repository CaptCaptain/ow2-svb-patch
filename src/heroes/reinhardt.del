enum hudDisplay {left, right}

globalvar define ReinhardtHudDisplay = 1;
playervar define ReinhardtFirestrikeCharges = 2;
playervar define ReinhardtFirestrikeCooldown;
playervar define ReinhardtHud = [];
playervar define ReinhardtHealthPool = [];
playervar define facingAngle;

/* ======================================================== */

void CleanupReinhardt() "Subroutine: Cleanup Reinhardt" {
    WaitUntil(HeroOf() != Hero.Reinhardt && !IsDuplicating(), 9999);

    foreach (define healthPool in ReinhardtHealthPool) {
        RemoveHealthPoolFromPlayer(healthPool);
    }
    foreach (define hud in ReinhardtHud) {
        DestroyHudText(hud);
        DestroyInWorldText(hud);
    }

    Wait();

    SetMaxHealth(HealthPercent: 100);
    SetAbility2Enabled(Enabled: true);

    ModifyVariable(ActiveHero, Operation.RemoveFromArrayByValue, Hero.Reinhardt);
}

void InitialReinhardt() 'Subroutine: InitialReinhardt' {
    AbortIf(ArrayContains(ActiveHero, Hero.Reinhardt));
    Wait();

    ModifyVariable(ActiveHero, Operation.AppendToArray, Hero.Reinhardt);

    Wait();
    
    # Variable setup
    ReinhardtFirestrikeCharges = 2;
    ChaseVariableAtRate(ReinhardtFirestrikeCooldown, 0, 1, RateChaseReevaluation.DestinationAndRate);
    
    # Character setup
    SetMaxHealth(EventPlayer(), 50);
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 150, true, true);
    ModifyVariable(ReinhardtHealthPool, Operation.AppendToArray, LastCreatedHealthPool());
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, 125, true, true);
    ModifyVariable(ReinhardtHealthPool, Operation.AppendToArray, LastCreatedHealthPool());

    // Create hud text
    switch (ReinhardtHudDisplay) {
        case hudDisplay.left:
            CreateHudText(EventPlayer(), null, null, " \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", Location.Left, 0, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
            ModifyVariable(ReinhardtHud, Operation.AppendToArray, LastTextID());
            CreateHudText(EventPlayer(), <"<0> Fire Strike: <1> (<2>)", AbilityIconString(Hero.Reinhardt, Button.Ability2), RoundToInteger(ReinhardtFirestrikeCharges, Rounding.Down), RoundToInteger(ReinhardtFirestrikeCharges, Rounding.Down) == 2 ? IconString(Icon.Checkmark) : RoundToInteger(ReinhardtFirestrikeCooldown, Rounding.Up)>, null, null, Location.Left, 1, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
            ModifyVariable(ReinhardtHud, Operation.AppendToArray, LastTextID());
            break;
        case hudDisplay.right:
            CreateHudText(EventPlayer(), null, null, <"<0>(<1>) [<2>]", <" \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n <0>", <"                                                                                                                            <0>", <"                                                                                                                            <0>", "                                                                         ">>>, RoundToInteger(ReinhardtFirestrikeCharges, Rounding.Down) > 0 ? RoundToInteger(ReinhardtFirestrikeCharges, Rounding.Down) : IconString(Icon.X), RoundToInteger(ReinhardtFirestrikeCharges, Rounding.Down) == 2 ? IconString(Icon.Checkmark) : RoundToInteger(ReinhardtFirestrikeCooldown, Rounding.Up)>, Location.Left, 1, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
            ModifyVariable(ReinhardtHud, Operation.AppendToArray, LastTextID());
            break;
    }

    # Start Rule
    async! CleanupReinhardt();
}

void ReinhardtChargeCancelling() 'Subroutine: Reinhardt Charge Cancelling' {
    Wait(1);
    WaitUntil(!IsButtonHeld(EventPlayer(), Button.Ability1) || !IsUsingAbility1(EventPlayer()), 99999);
    WaitUntil(!IsUsingAbility1(EventPlayer()) || IsButtonHeld(EventPlayer(), Button.Ability1), 99999);
    CancelPrimaryAction(EventPlayer());
}

void ReinhardtLowerChargeCooldown() 'Subroutine: Reinhardt Lower Charge Cooldown' {
    WaitUntil(IsUsingAbility1(EventPlayer()) == false, 9999);
    SetAbilityCooldown(EventPlayer(), Button.Ability1, 8);
}

void ReinhardtRefreshFirestrike() 'Subroutine: Reinhardt Refresh Firestrike' {
    WaitUntil(IsUsingAbility2(EventPlayer()) == false, 9999);
    SetAbilityCooldown(EventPlayer(), Button.Ability2, 0);
}

void ReinhardtFirestrikeRecharge() 'Subroutine: Reinhardt Firestrike Recharge' {
    ReinhardtFirestrikeCooldown = 6;
    WaitUntil(ReinhardtFirestrikeCooldown == 0, 9999);
    ReinhardtFirestrikeCharges += 1;
    LoopIfConditionIsTrue();
}

void ReinhardtDetectFacingAngle() 'Subroutine: Reinhardt Detect Facing Angle' {
    facingAngle = HorizontalFacingAngleOf(EventPlayer());
    MinWait();
    # steering right
    if (AngleDifference(HorizontalFacingAngleOf(EventPlayer()), facingAngle) > 0)
    {
        if (IsInAir(EventPlayer()))
        {
            StartAccelerating(EventPlayer(), Right(), 100, 4, Relative.ToPlayer, AccelerateRev.DirectionRateAndMaxSpeed);
        }
        else
        {
            StartAccelerating(EventPlayer(), Right(), 500, 11.5, Relative.ToPlayer, AccelerateRev.DirectionRateAndMaxSpeed);
        }
    }
    else if (AngleDifference(HorizontalFacingAngleOf(EventPlayer()), facingAngle) < 0)
    {
        if (IsInAir(EventPlayer()))
        {
            StartAccelerating(EventPlayer(), Left(), 100, 4, Relative.ToPlayer, AccelerateRev.DirectionRateAndMaxSpeed);
        }
        else
        {
            StartAccelerating(EventPlayer(), Left(), 500, 11.5, Relative.ToPlayer, AccelerateRev.DirectionRateAndMaxSpeed);
        }
    }
    else
    {
        StopAccelerating(EventPlayer());
    }
    LoopIfConditionIsTrue();
    StopAccelerating();
}

/* ======================================================== */

rule: "Initial Reinhardt"
Event.OngoingPlayer
Player.Reinhardt
{
    InitialReinhardt();
}

rule: "Reinhardt Charge Cancelling"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1(EventPlayer()) == true)
{
    ReinhardtChargeCancelling();
}

rule: "Reinhardt Lower Charge Cooldown"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1(EventPlayer()) == true)
{
    ReinhardtLowerChargeCooldown();
}

rule: "Refresh Reinhardt Firestrike"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility2(EventPlayer()) == true)
{
    ReinhardtRefreshFirestrike();
}

rule: "Reinhardt Firestrike Recharge"
Event.OngoingPlayer
Player.Reinhardt
if (RoundToInteger(ReinhardtFirestrikeCharges, Rounding.Down) < 2)
{
    ReinhardtFirestrikeRecharge();
}

rule: "Reinhardt Firestrike Expends Charge"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility2(EventPlayer()) == true)
{
    ReinhardtFirestrikeCharges -= 1;
}

rule: "Reinhardt Enable Firestrike when charges are available"
Event.OngoingPlayer
Player.Reinhardt
if (RoundToInteger(ReinhardtFirestrikeCharges, Rounding.Down) > 0)
{
    SetAbility2Enabled(EventPlayer(), true);
}

rule: "Reinhardt Disable Firestrike when charges are not available"
Event.OngoingPlayer
Player.Reinhardt
if (RoundToInteger(ReinhardtFirestrikeCharges, Rounding.Down) <= 0)
{
    SetAbility2Enabled(EventPlayer(), false);
}

rule: "Reinhardt Detect Facing Angle"
Event.OngoingPlayer
Player.Reinhardt
if (IsUsingAbility1(EventPlayer()) == true)
{
    ReinhardtDetectFacingAngle();
}

/* ======================================================== */

rule: "Initial Reinhardt (Duplication)"
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Reinhardt)
{
    InitialReinhardt();
}

rule: "Reinhardt Charge Cancelling (Duplication)"
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Reinhardt)
if (IsUsingAbility1(EventPlayer()) == true)
{
    ReinhardtChargeCancelling();
}

rule: "Reinhardt Lower Charge Cooldown (Duplication)"
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Reinhardt)
if (IsUsingAbility1(EventPlayer()) == true)
{
    ReinhardtLowerChargeCooldown();
}

rule: "Refresh Reinhardt Firestrike (Duplication)"
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Reinhardt)
if (IsUsingAbility2(EventPlayer()) == true)
{
    ReinhardtRefreshFirestrike();
}

rule: "Reinhardt Firestrike Recharge (Duplication)"
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Reinhardt)
if (RoundToInteger(ReinhardtFirestrikeCharges, Rounding.Down) < 2)
{
    ReinhardtFirestrikeRecharge();
}

rule: "Reinhardt Firestrike Expends Charge (Duplication)"
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Reinhardt)
if (IsUsingAbility2(EventPlayer()) == true)
{
    ReinhardtFirestrikeCharges -= 1;
}

rule: "Reinhardt Enable Firestrike when charges are available (Duplication)"
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Reinhardt)
if (RoundToInteger(ReinhardtFirestrikeCharges, Rounding.Down) > 0)
{
    SetAbility2Enabled(EventPlayer(), true);
}

rule: "Reinhardt Disable Firestrike when charges are not available (Duplication)"
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Reinhardt)
if (RoundToInteger(ReinhardtFirestrikeCharges, Rounding.Down) <= 0)
{
    SetAbility2Enabled(EventPlayer(), false);
}

rule: "Reinhardt Detect Facing Angle (Duplication)"
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Reinhardt)
if (IsUsingAbility1(EventPlayer()) == true)
{
    ReinhardtDetectFacingAngle();
}