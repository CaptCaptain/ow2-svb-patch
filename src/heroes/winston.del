playervar define WinstonHealthPool = [];

void CleanupWinston() "Subroutine: Cleanup Winston" {
    WaitUntil(HeroOf() != Hero.Winston && !IsDuplicating(), 9999);

    foreach (define healthPool in WinstonHealthPool) {
        RemoveHealthPoolFromPlayer(healthPool);
    }

    Wait();

    SetMaxHealth(HealthPercent: 100);

    ModifyVariable(ActiveHero, Operation.RemoveFromArrayByValue, Hero.Winston);
}

void InitialWinston() "Subroutine: Initial Winston" {
    AbortIf(ArrayContains(ActiveHero, Hero.Winston));

    Wait();

    # Variable setup
    ModifyVariable(ActiveHero, Operation.AppendToArray, Hero.Winston);

    # Character setup
    SetMaxHealth(HealthPercent: 92.85714286);
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, IsUsingUltimate() ? (60.71428569 + 50) : 75, true, true);
    ModifyVariable(WinstonHealthPool, Operation.AppendToArray, LastCreatedHealthPool());
    AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, IsUsingUltimate() ? 10.7 : 10.7, true, true);
    ModifyVariable(WinstonHealthPool, Operation.AppendToArray, LastCreatedHealthPool());

    # Start Rule
    async! CleanupWinston();
}

rule: "Initial Winston"
Event.OngoingPlayer
Player.Winston
{
    InitialWinston();
}

rule: "Initial Winston (Duplication)"
Event.OngoingPlayer
Player.Echo
if (HeroBeingDuplicated() == Hero.Winston)
{
    InitialWinston();
}